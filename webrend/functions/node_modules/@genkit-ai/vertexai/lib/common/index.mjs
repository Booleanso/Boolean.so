import {
  __async,
  __spreadValues
} from "../chunk-MLCSNVBT.mjs";
import { VertexAI } from "@google-cloud/vertexai";
import { GoogleAuth } from "google-auth-library";
import { CLOUD_PLATFORM_OAUTH_SCOPE } from "./constants.js";
function parseFirebaseProjectId() {
  if (!process.env.FIREBASE_CONFIG) return void 0;
  try {
    return JSON.parse(process.env.FIREBASE_CONFIG).projectId;
  } catch (e) {
    return void 0;
  }
}
function getDerivedParams(options) {
  return __async(this, null, function* () {
    let authOptions = options == null ? void 0 : options.googleAuth;
    let authClient;
    const providedProjectId = (options == null ? void 0 : options.projectId) || process.env.GCLOUD_PROJECT || parseFirebaseProjectId();
    if (process.env.GCLOUD_SERVICE_ACCOUNT_CREDS) {
      const serviceAccountCreds = JSON.parse(
        process.env.GCLOUD_SERVICE_ACCOUNT_CREDS
      );
      authOptions = {
        credentials: serviceAccountCreds,
        scopes: [CLOUD_PLATFORM_OAUTH_SCOPE],
        projectId: providedProjectId
      };
      authClient = new GoogleAuth(authOptions);
    } else {
      authClient = new GoogleAuth(
        authOptions != null ? authOptions : {
          scopes: [CLOUD_PLATFORM_OAUTH_SCOPE],
          projectId: providedProjectId
        }
      );
    }
    const projectId = (options == null ? void 0 : options.projectId) || (yield authClient.getProjectId());
    const location = (options == null ? void 0 : options.location) || "us-central1";
    if (!location) {
      throw new Error(
        `VertexAI Plugin is missing the 'location' configuration. Please set the 'GCLOUD_LOCATION' environment variable or explicitly pass 'location' into genkit config.`
      );
    }
    if (!projectId) {
      throw new Error(
        `VertexAI Plugin is missing the 'project' configuration. Please set the 'GCLOUD_PROJECT' environment variable or explicitly pass 'project' into genkit config.`
      );
    }
    const vertexClientFactoryCache = {};
    const vertexClientFactory = (request) => {
      var _a;
      const requestLocation = ((_a = request.config) == null ? void 0 : _a.location) || location;
      if (!vertexClientFactoryCache[requestLocation]) {
        vertexClientFactoryCache[requestLocation] = new VertexAI({
          project: projectId,
          location: requestLocation,
          googleAuthOptions: __spreadValues({ projectId: providedProjectId }, authOptions)
        });
      }
      return vertexClientFactoryCache[requestLocation];
    };
    return {
      location,
      projectId,
      vertexClientFactory,
      authClient
    };
  });
}
export {
  getDerivedParams
};
//# sourceMappingURL=index.mjs.map