"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var common_exports = {};
__export(common_exports, {
  getDerivedParams: () => getDerivedParams
});
module.exports = __toCommonJS(common_exports);
var import_vertexai = require("@google-cloud/vertexai");
var import_google_auth_library = require("google-auth-library");
var import_constants = require("./constants.js");
function parseFirebaseProjectId() {
  if (!process.env.FIREBASE_CONFIG) return void 0;
  try {
    return JSON.parse(process.env.FIREBASE_CONFIG).projectId;
  } catch (e) {
    return void 0;
  }
}
function getDerivedParams(options) {
  return __async(this, null, function* () {
    let authOptions = options == null ? void 0 : options.googleAuth;
    let authClient;
    const providedProjectId = (options == null ? void 0 : options.projectId) || process.env.GCLOUD_PROJECT || parseFirebaseProjectId();
    if (process.env.GCLOUD_SERVICE_ACCOUNT_CREDS) {
      const serviceAccountCreds = JSON.parse(
        process.env.GCLOUD_SERVICE_ACCOUNT_CREDS
      );
      authOptions = {
        credentials: serviceAccountCreds,
        scopes: [import_constants.CLOUD_PLATFORM_OAUTH_SCOPE],
        projectId: providedProjectId
      };
      authClient = new import_google_auth_library.GoogleAuth(authOptions);
    } else {
      authClient = new import_google_auth_library.GoogleAuth(
        authOptions != null ? authOptions : {
          scopes: [import_constants.CLOUD_PLATFORM_OAUTH_SCOPE],
          projectId: providedProjectId
        }
      );
    }
    const projectId = (options == null ? void 0 : options.projectId) || (yield authClient.getProjectId());
    const location = (options == null ? void 0 : options.location) || "us-central1";
    if (!location) {
      throw new Error(
        `VertexAI Plugin is missing the 'location' configuration. Please set the 'GCLOUD_LOCATION' environment variable or explicitly pass 'location' into genkit config.`
      );
    }
    if (!projectId) {
      throw new Error(
        `VertexAI Plugin is missing the 'project' configuration. Please set the 'GCLOUD_PROJECT' environment variable or explicitly pass 'project' into genkit config.`
      );
    }
    const vertexClientFactoryCache = {};
    const vertexClientFactory = (request) => {
      var _a;
      const requestLocation = ((_a = request.config) == null ? void 0 : _a.location) || location;
      if (!vertexClientFactoryCache[requestLocation]) {
        vertexClientFactoryCache[requestLocation] = new import_vertexai.VertexAI({
          project: projectId,
          location: requestLocation,
          googleAuthOptions: __spreadValues({ projectId: providedProjectId }, authOptions)
        });
      }
      return vertexClientFactoryCache[requestLocation];
    };
    return {
      location,
      projectId,
      vertexClientFactory,
      authClient
    };
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getDerivedParams
});
//# sourceMappingURL=index.js.map