import {
  __async,
  __spreadProps,
  __spreadValues
} from "./chunk-MLCSNVBT.mjs";
import { z } from "genkit";
import { embedderRef } from "genkit/embedder";
import { predictModel } from "./predict.js";
const TaskTypeSchema = z.enum([
  "RETRIEVAL_DOCUMENT",
  "RETRIEVAL_QUERY",
  "SEMANTIC_SIMILARITY",
  "CLASSIFICATION",
  "CLUSTERING"
]);
const VertexEmbeddingConfigSchema = z.object({
  /**
   * The `task_type` parameter is defined as the intended downstream application to help the model
   * produce better quality embeddings.
   **/
  taskType: TaskTypeSchema.optional(),
  title: z.string().optional(),
  location: z.string().optional(),
  version: z.string().optional()
});
function commonRef(name, input) {
  return embedderRef({
    name: `vertexai/${name}`,
    configSchema: VertexEmbeddingConfigSchema,
    info: {
      dimensions: 768,
      label: `Vertex AI - ${name}`,
      supports: {
        input: input != null ? input : ["text"]
      }
    }
  });
}
const textEmbeddingGecko003 = commonRef("textembedding-gecko@003");
const textEmbedding004 = commonRef("text-embedding-004");
const textEmbeddingGeckoMultilingual001 = commonRef(
  "textembedding-gecko-multilingual@001"
);
const textMultilingualEmbedding002 = commonRef(
  "text-multilingual-embedding-002"
);
const SUPPORTED_EMBEDDER_MODELS = {
  "textembedding-gecko@003": textEmbeddingGecko003,
  "text-embedding-004": textEmbedding004,
  "textembedding-gecko-multilingual@001": textEmbeddingGeckoMultilingual001,
  "text-multilingual-embedding-002": textMultilingualEmbedding002
  // TODO: add support for multimodal embeddings
  // 'multimodalembedding@001': commonRef('multimodalembedding@001', [
  //   'image',
  //   'text',
  // ]),
};
function defineVertexAIEmbedder(ai, name, client, options) {
  const embedder = SUPPORTED_EMBEDDER_MODELS[name];
  const predictClients = {};
  const predictClientFactory = (config) => {
    const requestLocation = (config == null ? void 0 : config.location) || options.location;
    if (!predictClients[requestLocation]) {
      predictClients[requestLocation] = predictModel(
        client,
        __spreadProps(__spreadValues({}, options), {
          location: requestLocation
        }),
        name
      );
    }
    return predictClients[requestLocation];
  };
  return ai.defineEmbedder(
    {
      name: embedder.name,
      configSchema: embedder.configSchema,
      info: embedder.info
    },
    (input, options2) => __async(this, null, function* () {
      const predictClient = predictClientFactory(options2);
      const response = yield predictClient(
        input.map((i) => {
          return {
            content: i.text,
            task_type: options2 == null ? void 0 : options2.taskType,
            title: options2 == null ? void 0 : options2.title
          };
        })
      );
      return {
        embeddings: response.predictions.map((p) => ({
          embedding: p.embeddings.values
        }))
      };
    })
  );
}
export {
  SUPPORTED_EMBEDDER_MODELS,
  TaskTypeSchema,
  VertexEmbeddingConfigSchema,
  defineVertexAIEmbedder,
  textEmbedding004,
  textEmbeddingGecko003,
  textEmbeddingGeckoMultilingual001,
  textMultilingualEmbedding002
};
//# sourceMappingURL=embedder.mjs.map