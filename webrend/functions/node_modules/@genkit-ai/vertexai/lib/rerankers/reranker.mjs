import {
  __async,
  __spreadProps,
  __spreadValues
} from "../chunk-MLCSNVBT.mjs";
import { RankedDocument, rerankerRef } from "genkit/reranker";
import { DEFAULT_MODEL, getRerankEndpoint } from "./constants.js";
import { VertexAIRerankerOptionsSchema } from "./types.js";
function vertexAiRerankers(ai, options) {
  return __async(this, null, function* () {
    const rerankOptions = options.rerankOptions;
    if (rerankOptions.length === 0) {
      throw new Error("Provide at least one reranker configuration.");
    }
    const auth = options.authClient;
    const client = yield auth.getClient();
    const projectId = options.projectId;
    for (const rerankOption of rerankOptions) {
      if (!rerankOption.name && !rerankOption.model) {
        throw new Error("At least one of name or model must be provided.");
      }
      ai.defineReranker(
        {
          name: `vertexai/${rerankOption.name || rerankOption.model}`,
          configSchema: VertexAIRerankerOptionsSchema.optional()
        },
        (query, documents, _options) => __async(this, null, function* () {
          var _a;
          const response = yield client.request({
            method: "POST",
            url: getRerankEndpoint(projectId, (_a = options.location) != null ? _a : "us-central1"),
            data: {
              model: rerankOption.model || DEFAULT_MODEL,
              // Use model from config or default
              query: query.text,
              records: documents.map((doc, idx) => ({
                id: `${idx}`,
                content: doc.text
              }))
            }
          });
          const rankedDocuments = response.data.records.map((record) => {
            const doc = documents[record.id];
            return new RankedDocument({
              content: doc.content,
              metadata: __spreadProps(__spreadValues({}, doc.metadata), {
                score: record.score
              })
            });
          });
          return { documents: rankedDocuments };
        })
      );
    }
  });
}
const vertexAiRerankerRef = (params) => {
  var _a;
  return rerankerRef({
    name: `vertexai/${params.rerankerName}`,
    info: {
      label: (_a = params.displayName) != null ? _a : `Vertex AI Reranker`
    },
    configSchema: VertexAIRerankerOptionsSchema.optional()
  });
};
export {
  vertexAiRerankerRef,
  vertexAiRerankers
};
//# sourceMappingURL=reranker.mjs.map