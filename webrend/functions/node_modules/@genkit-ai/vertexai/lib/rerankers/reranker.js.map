{"version":3,"sources":["../../src/rerankers/reranker.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Genkit } from 'genkit';\nimport { RankedDocument, rerankerRef } from 'genkit/reranker';\nimport { DEFAULT_MODEL, getRerankEndpoint } from './constants.js';\nimport { VertexAIRerankerOptionsSchema, VertexRerankOptions } from './types.js';\n\n/**\n * Creates Vertex AI rerankers.\n *\n * This function creates and registers rerankers for the specified models.\n *\n * @param {VertexRerankOptions<EmbedderCustomOptions>} options - The parameters for creating the rerankers.\n * @returns {Promise<void>}\n */\nexport async function vertexAiRerankers(\n  ai: Genkit,\n  options: VertexRerankOptions\n): Promise<void> {\n  const rerankOptions = options.rerankOptions;\n\n  if (rerankOptions.length === 0) {\n    throw new Error('Provide at least one reranker configuration.');\n  }\n\n  const auth = options.authClient;\n  const client = await auth.getClient();\n  const projectId = options.projectId;\n\n  for (const rerankOption of rerankOptions) {\n    if (!rerankOption.name && !rerankOption.model) {\n      throw new Error('At least one of name or model must be provided.');\n    }\n    ai.defineReranker(\n      {\n        name: `vertexai/${rerankOption.name || rerankOption.model}`,\n        configSchema: VertexAIRerankerOptionsSchema.optional(),\n      },\n      async (query, documents, _options) => {\n        const response = await client.request({\n          method: 'POST',\n          url: getRerankEndpoint(projectId, options.location ?? 'us-central1'),\n          data: {\n            model: rerankOption.model || DEFAULT_MODEL, // Use model from config or default\n            query: query.text,\n            records: documents.map((doc, idx) => ({\n              id: `${idx}`,\n              content: doc.text,\n            })),\n          },\n        });\n\n        const rankedDocuments: RankedDocument[] = (\n          response.data as any\n        ).records.map((record: any) => {\n          const doc = documents[record.id];\n          return new RankedDocument({\n            content: doc.content,\n            metadata: {\n              ...doc.metadata,\n              score: record.score,\n            },\n          });\n        });\n\n        return { documents: rankedDocuments };\n      }\n    );\n  }\n}\n\n/**\n * Creates a reference to a Vertex AI reranker.\n *\n * @param {Object} params - The parameters for the reranker reference.\n * @param {string} [params.displayName] - An optional display name for the reranker.\n * @returns {Object} - The reranker reference object.\n */\nexport const vertexAiRerankerRef = (params: {\n  rerankerName: string;\n  displayName?: string;\n}) => {\n  return rerankerRef({\n    name: `vertexai/${params.rerankerName}`,\n    info: {\n      label: params.displayName ?? `Vertex AI Reranker`,\n    },\n    configSchema: VertexAIRerankerOptionsSchema.optional(),\n  });\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA,sBAA4C;AAC5C,uBAAiD;AACjD,mBAAmE;AAUnE,SAAsB,kBACpB,IACA,SACe;AAAA;AACf,UAAM,gBAAgB,QAAQ;AAE9B,QAAI,cAAc,WAAW,GAAG;AAC9B,YAAM,IAAI,MAAM,8CAA8C;AAAA,IAChE;AAEA,UAAM,OAAO,QAAQ;AACrB,UAAM,SAAS,MAAM,KAAK,UAAU;AACpC,UAAM,YAAY,QAAQ;AAE1B,eAAW,gBAAgB,eAAe;AACxC,UAAI,CAAC,aAAa,QAAQ,CAAC,aAAa,OAAO;AAC7C,cAAM,IAAI,MAAM,iDAAiD;AAAA,MACnE;AACA,SAAG;AAAA,QACD;AAAA,UACE,MAAM,YAAY,aAAa,QAAQ,aAAa,KAAK;AAAA,UACzD,cAAc,2CAA8B,SAAS;AAAA,QACvD;AAAA,QACA,CAAO,OAAO,WAAW,aAAa;AApD5C;AAqDQ,gBAAM,WAAW,MAAM,OAAO,QAAQ;AAAA,YACpC,QAAQ;AAAA,YACR,SAAK,oCAAkB,YAAW,aAAQ,aAAR,YAAoB,aAAa;AAAA,YACnE,MAAM;AAAA,cACJ,OAAO,aAAa,SAAS;AAAA;AAAA,cAC7B,OAAO,MAAM;AAAA,cACb,SAAS,UAAU,IAAI,CAAC,KAAK,SAAS;AAAA,gBACpC,IAAI,GAAG,GAAG;AAAA,gBACV,SAAS,IAAI;AAAA,cACf,EAAE;AAAA,YACJ;AAAA,UACF,CAAC;AAED,gBAAM,kBACJ,SAAS,KACT,QAAQ,IAAI,CAAC,WAAgB;AAC7B,kBAAM,MAAM,UAAU,OAAO,EAAE;AAC/B,mBAAO,IAAI,+BAAe;AAAA,cACxB,SAAS,IAAI;AAAA,cACb,UAAU,iCACL,IAAI,WADC;AAAA,gBAER,OAAO,OAAO;AAAA,cAChB;AAAA,YACF,CAAC;AAAA,UACH,CAAC;AAED,iBAAO,EAAE,WAAW,gBAAgB;AAAA,QACtC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AASO,MAAM,sBAAsB,CAAC,WAG9B;AA/FN;AAgGE,aAAO,6BAAY;AAAA,IACjB,MAAM,YAAY,OAAO,YAAY;AAAA,IACrC,MAAM;AAAA,MACJ,QAAO,YAAO,gBAAP,YAAsB;AAAA,IAC/B;AAAA,IACA,cAAc,2CAA8B,SAAS;AAAA,EACvD,CAAC;AACH;","names":[]}