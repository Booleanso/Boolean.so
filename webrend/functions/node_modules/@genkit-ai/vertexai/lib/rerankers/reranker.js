"use strict";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var reranker_exports = {};
__export(reranker_exports, {
  vertexAiRerankerRef: () => vertexAiRerankerRef,
  vertexAiRerankers: () => vertexAiRerankers
});
module.exports = __toCommonJS(reranker_exports);
var import_reranker = require("genkit/reranker");
var import_constants = require("./constants.js");
var import_types = require("./types.js");
function vertexAiRerankers(ai, options) {
  return __async(this, null, function* () {
    const rerankOptions = options.rerankOptions;
    if (rerankOptions.length === 0) {
      throw new Error("Provide at least one reranker configuration.");
    }
    const auth = options.authClient;
    const client = yield auth.getClient();
    const projectId = options.projectId;
    for (const rerankOption of rerankOptions) {
      if (!rerankOption.name && !rerankOption.model) {
        throw new Error("At least one of name or model must be provided.");
      }
      ai.defineReranker(
        {
          name: `vertexai/${rerankOption.name || rerankOption.model}`,
          configSchema: import_types.VertexAIRerankerOptionsSchema.optional()
        },
        (query, documents, _options) => __async(this, null, function* () {
          var _a;
          const response = yield client.request({
            method: "POST",
            url: (0, import_constants.getRerankEndpoint)(projectId, (_a = options.location) != null ? _a : "us-central1"),
            data: {
              model: rerankOption.model || import_constants.DEFAULT_MODEL,
              // Use model from config or default
              query: query.text,
              records: documents.map((doc, idx) => ({
                id: `${idx}`,
                content: doc.text
              }))
            }
          });
          const rankedDocuments = response.data.records.map((record) => {
            const doc = documents[record.id];
            return new import_reranker.RankedDocument({
              content: doc.content,
              metadata: __spreadProps(__spreadValues({}, doc.metadata), {
                score: record.score
              })
            });
          });
          return { documents: rankedDocuments };
        })
      );
    }
  });
}
const vertexAiRerankerRef = (params) => {
  var _a;
  return (0, import_reranker.rerankerRef)({
    name: `vertexai/${params.rerankerName}`,
    info: {
      label: (_a = params.displayName) != null ? _a : `Vertex AI Reranker`
    },
    configSchema: import_types.VertexAIRerankerOptionsSchema.optional()
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  vertexAiRerankerRef,
  vertexAiRerankers
});
//# sourceMappingURL=reranker.js.map