{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Genkit } from 'genkit';\nimport { GenkitPlugin, genkitPlugin } from 'genkit/plugin';\nimport { getDerivedParams } from './common/index.js';\nimport { PluginOptions } from './common/types.js';\nimport {\n  SUPPORTED_EMBEDDER_MODELS,\n  defineVertexAIEmbedder,\n  textEmbedding004,\n  textEmbeddingGecko003,\n  textEmbeddingGeckoMultilingual001,\n  textMultilingualEmbedding002,\n} from './embedder.js';\nimport {\n  SUPPORTED_GEMINI_MODELS,\n  defineGeminiModel,\n  gemini10Pro,\n  gemini15Flash,\n  gemini15Pro,\n} from './gemini.js';\nimport {\n  SUPPORTED_IMAGEN_MODELS,\n  imagen2,\n  imagen3,\n  imagen3Fast,\n  imagenModel,\n} from './imagen.js';\nexport { type PluginOptions } from './common/types.js';\nexport {\n  gemini10Pro,\n  gemini15Flash,\n  gemini15Pro,\n  imagen2,\n  imagen3,\n  imagen3Fast,\n  textEmbedding004,\n  textEmbeddingGecko003,\n  textEmbeddingGeckoMultilingual001,\n  textMultilingualEmbedding002,\n};\n\n/**\n * Add Google Cloud Vertex AI to Genkit. Includes Gemini and Imagen models and text embedder.\n */\nexport function vertexAI(options?: PluginOptions): GenkitPlugin {\n  return genkitPlugin('vertexai', async (ai: Genkit) => {\n    const { projectId, location, vertexClientFactory, authClient } =\n      await getDerivedParams(options);\n\n    Object.keys(SUPPORTED_IMAGEN_MODELS).map((name) =>\n      imagenModel(ai, name, authClient, { projectId, location })\n    );\n    Object.keys(SUPPORTED_GEMINI_MODELS).map((name) =>\n      defineGeminiModel(ai, name, vertexClientFactory, { projectId, location })\n    );\n\n    Object.keys(SUPPORTED_EMBEDDER_MODELS).map((name) =>\n      defineVertexAIEmbedder(ai, name, authClient, { projectId, location })\n    );\n  });\n}\n\nexport default vertexAI;\n"],"mappings":";;;AAiBA,SAAuB,oBAAoB;AAC3C,SAAS,wBAAwB;AAEjC;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAkBA,SAAS,SAAS,SAAuC;AAC9D,SAAO,aAAa,YAAY,CAAO,OAAe;AACpD,UAAM,EAAE,WAAW,UAAU,qBAAqB,WAAW,IAC3D,MAAM,iBAAiB,OAAO;AAEhC,WAAO,KAAK,uBAAuB,EAAE;AAAA,MAAI,CAAC,SACxC,YAAY,IAAI,MAAM,YAAY,EAAE,WAAW,SAAS,CAAC;AAAA,IAC3D;AACA,WAAO,KAAK,uBAAuB,EAAE;AAAA,MAAI,CAAC,SACxC,kBAAkB,IAAI,MAAM,qBAAqB,EAAE,WAAW,SAAS,CAAC;AAAA,IAC1E;AAEA,WAAO,KAAK,yBAAyB,EAAE;AAAA,MAAI,CAAC,SAC1C,uBAAuB,IAAI,MAAM,YAAY,EAAE,WAAW,SAAS,CAAC;AAAA,IACtE;AAAA,EACF,EAAC;AACH;AAEA,IAAO,cAAQ;","names":[]}