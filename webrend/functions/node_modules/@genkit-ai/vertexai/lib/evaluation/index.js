"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var evaluation_exports = {};
__export(evaluation_exports, {
  VertexAIEvaluationMetricType: () => import_types2.VertexAIEvaluationMetricType,
  vertexAIEvaluation: () => vertexAIEvaluation
});
module.exports = __toCommonJS(evaluation_exports);
var import_plugin = require("genkit/plugin");
var import_common = require("../common/index.js");
var import_evaluation = require("./evaluation.js");
var import_types2 = require("./types.js");
function vertexAIEvaluation(options) {
  return (0, import_plugin.genkitPlugin)("vertexAIEvaluation", (ai) => __async(this, null, function* () {
    const { projectId, location, authClient } = yield (0, import_common.getDerivedParams)(options);
    (0, import_evaluation.vertexEvaluators)(ai, authClient, options.metrics, projectId, location);
  }));
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  VertexAIEvaluationMetricType,
  vertexAIEvaluation
});
//# sourceMappingURL=index.js.map