import {
  __async
} from "../../chunk-MLCSNVBT.mjs";
import { indexerRef } from "genkit/retriever";
import {
  Datapoint,
  VertexAIVectorIndexerOptionsSchema
} from "./types";
import { upsertDatapoints } from "./upsert_datapoints";
const vertexAiIndexerRef = (params) => {
  var _a;
  return indexerRef({
    name: `vertexai/${params.indexId}`,
    info: {
      label: (_a = params.displayName) != null ? _a : `Vertex AI - ${params.indexId}`
    },
    configSchema: VertexAIVectorIndexerOptionsSchema.optional()
  });
};
function vertexAiIndexers(ai, params) {
  var _a;
  const vectorSearchOptions = params.pluginOptions.vectorSearchOptions;
  const indexers = [];
  if (!vectorSearchOptions || vectorSearchOptions.length === 0) {
    return indexers;
  }
  for (const vectorSearchOption of vectorSearchOptions) {
    const { documentIndexer, indexId } = vectorSearchOption;
    const embedderReference = (_a = vectorSearchOption.embedder) != null ? _a : params.defaultEmbedder;
    if (!embedderReference) {
      throw new Error(
        "Embedder reference is required to define Vertex AI retriever"
      );
    }
    const embedderOptions = vectorSearchOption.embedderOptions;
    const indexer = ai.defineIndexer(
      {
        name: `vertexai/${indexId}`,
        configSchema: VertexAIVectorIndexerOptionsSchema.optional()
      },
      (docs, options) => __async(this, null, function* () {
        let docIds = [];
        try {
          docIds = yield documentIndexer(docs, options);
        } catch (error) {
          throw new Error(
            `Error storing your document content/metadata: ${error}`
          );
        }
        const embeddings = yield ai.embedMany({
          embedder: embedderReference,
          content: docs,
          options: embedderOptions
        });
        const datapoints = embeddings.map(
          ({ embedding }, i) => new Datapoint({
            datapointId: docIds[i],
            featureVector: embedding
          })
        );
        try {
          yield upsertDatapoints({
            datapoints,
            authClient: params.authClient,
            projectId: params.pluginOptions.projectId,
            location: params.pluginOptions.location,
            indexId
          });
        } catch (error) {
          throw error;
        }
      })
    );
    indexers.push(indexer);
  }
  return indexers;
}
export {
  vertexAiIndexerRef,
  vertexAiIndexers
};
//# sourceMappingURL=indexers.mjs.map